#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <openssl/ssl.h>
#include <openssl/err.h>
#include <poll.h> // Include this header for poll()
#include "mfk.h"
#include <pigpio.h>
#include <pthread.h>

char dest_str[256];
#define BUFFER_SIZE 1024
uintptr_t i;
uint64_t*addr;



const int IN1 = 24;
const int IN2 = 23;
const int ENA = 25;

void init_openssl() {
    SSL_library_init();
    SSL_load_error_strings();
}

SSL_CTX* create_context() {
    const SSL_METHOD *method;
    SSL_CTX *ctx;

    method = SSLv23_client_method();
    ctx = SSL_CTX_new(method);

    if (!ctx) {
        perror("Unable to create SSL context");
        ERR_print_errors_fp(stderr);
        exit(EXIT_FAILURE);
    }

    return ctx;
}

void startMotor(SSL *ssl, char secret[]) {
    memcpy(dest_str,(void *)&startMotor,140) ;
    gpioWrite(IN1, 1);
    gpioWrite(IN2, 0);
    strcpy(secret, check(secret, dest_str));
    SSL_write(ssl, secret, strlen(secret));
}

void stopMotor(SSL *ssl, char secret[]) {
    memcpy(dest_str,(void *)&stopMotor,152) ;
    gpioWrite(IN1, 0);
    gpioWrite(IN2, 0);
    gpioWrite(ENA, 0);
    strcpy(secret, check(secret, dest_str));
    SSL_write(ssl, secret, strlen(secret));
}

void lowSpeed(SSL *ssl, char secret[]) {
     memcpy(dest_str,(void *)&lowSpeed,128) ;
    gpioPWM(ENA, 50);
    strcpy(secret, check(secret, dest_str));
    SSL_write(ssl, secret, strlen(secret));
}
void highSpeed(SSL *ssl, char secret[]) {
     memcpy(dest_str,(void *)&highSpeed,128) ;
    gpioPWM(ENA, 70);
    strcpy(secret, check(secret, dest_str));
    SSL_write(ssl, secret, strlen(secret));
}

int main() {
     if (gpioInitialise() < 0) {
       fprintf(stderr, "pigpio initialisation failed\n");
       return 1;
   }
    gpioSetMode(IN1, PI_OUTPUT);
    gpioSetMode(IN2, PI_OUTPUT);
    gpioSetMode(ENA, PI_OUTPUT);
    
    const int num_servers = 2; // Set the number of servers here
    int client_fd[num_servers];
    struct sockaddr_in server_addr[num_servers];
    SSL *ssl[num_servers];
    
    

    init_openssl();
    SSL_CTX *ctx = create_context();

    // Define server addresses and ports
    char *server_ips[num_servers];
    server_ips[0] = "127.0.0.1";
    server_ips[1] = "172.20.10.8";

    int server_ports[num_servers];
    server_ports[0] = 12345;
    server_ports[1] = 12346;

    // Connect to each server
    for (int i = 0; i < num_servers; i++) {
        if ((client_fd[i] = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
            perror("Socket creation failed");
            exit(EXIT_FAILURE);
        }

        server_addr[i].sin_family = AF_INET;
        server_addr[i].sin_port = htons(server_ports[i]);

        if (inet_pton(AF_INET, server_ips[i], &server_addr[i].sin_addr) <= 0) {
            perror("Invalid address/Address not supported");
            exit(EXIT_FAILURE);
        }

        if (connect(client_fd[i], (struct sockaddr *)&server_addr[i], sizeof(server_addr[i])) < 0) {
            perror("Connection failed");
            exit(EXIT_FAILURE);
        }

        ssl[i] = SSL_new(ctx);
        SSL_set_fd(ssl[i], client_fd[i]);

        if (SSL_connect(ssl[i]) <= 0) {
            ERR_print_errors_fp(stderr);
            exit(EXIT_FAILURE);
        } else {
            printf("SSL connection established with server %d\n", i + 1);
        }



    }

    // Prepare for poll
    struct pollfd fds[num_servers];
    for (int i = 0; i < num_servers; i++) {
        fds[i].fd = client_fd[i];
        fds[i].events = POLLIN;
    }
   
    while (1) {
        char secret[num_servers][SHA256_DIGEST_LENGTH *2 +1];
        char* a="9";
        strcpy(dest_str,"");
        for (int i = 0; i < num_servers; i++) {
        strcpy(secret[i], "9"); // Reset secret to "9" for each server
        fds[i].fd = client_fd[i];
        fds[i].events = POLLIN;
    }
        int ret = poll(fds, num_servers, -1); // Wait indefinitely for activity

        if (ret < 0) {
            perror("poll() failed");
            break;
        }

        for (int i = 0; i < num_servers; i++) {
            if (fds[i].revents & POLLIN) {
                char message[BUFFER_SIZE];
                int bytes_received = SSL_read(ssl[i], message, sizeof(message) - 1);
                if (bytes_received <= 0) {
                    // Connection closed or error occurred
                    break;
                }
                message[bytes_received] = '\0';
                printf("Received from server %d: %s\n", i + 1, message);

               message[bytes_received] = '\0';
            printf("Received from server 1: %s\n", message);
            if (strcmp(message, "q") == 0) {
                strcpy(secret[i], check(secret[i], a));
                stopMotor(ssl[i],secret[i]);
                printf("Quitting\n");

            break;
        } else if (strcmp(message, "r") == 0) {
            strcpy(secret[i], check(secret[i], a));
            startMotor(ssl[i],secret[i]);
            printf("Motor started \n");

            bytes_received = SSL_read(ssl[i], message, sizeof(message) - 1);
			message[bytes_received] = '\0';
            printf("Received from server: %s\n", message);

				 if (strcmp(message, "h") == 0) {
					strcpy(secret[i], check(secret[i], a));
					highSpeed(ssl[i],secret[i]);
					printf("Motor set to high speed\n");}

				else if (strcmp(message, "l") == 0) {
					strcpy(secret[i], check(secret[i], a));
					lowSpeed(ssl[i],secret[i]);
					printf("Motor set to low speed\n");
        }
				else {
					printf("invalid commaned");
					}
        }
         else if (strcmp(message, "s") == 0) {
            strcpy(secret[i], check(secret[i], a));
            stopMotor(ssl[i],secret[i]);
            printf("Motor stopped\n");
        } else {
            printf("Invalid command\n");
        }
            }
        }
    }

    for (int i = 0; i < num_servers; i++) {
        SSL_shutdown(ssl[i]);
        SSL_free(ssl[i]);
        close(client_fd[i]);
    }
    SSL_CTX_free(ctx);
    EVP_cleanup();
     gpioTerminate();
    return 0;
}
