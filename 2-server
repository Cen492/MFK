#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <openssl/ssl.h>
#include <openssl/err.h>
#include <pigpio.h>
#include "mfk.h"
#include <stdint.h>
#include <pthread.h>

#define PORT1 12345
#define PORT2 12346
#define BUFFER_SIZE 1024

const int IN1 = 24;
const int IN2 = 23;
const int ENA = 25;

char secret1[SHA256_DIGEST_LENGTH * 2 + 1];
char secret2[SHA256_DIGEST_LENGTH * 2 + 1];
SSL *ssl1; // SSL object for server 1
SSL *ssl2; // SSL object for server 2
uintptr_t G1;
uintptr_t G2;

void init_openssl() {
    SSL_library_init();
    OpenSSL_add_ssl_algorithms();
    SSL_load_error_strings();
}

SSL_CTX* create_context() {
    const SSL_METHOD *method;
    SSL_CTX *ctx;

    method = TLS_client_method(); // Use TLS_client_method() as SSLv23_client_method() is deprecated
    ctx = SSL_CTX_new(method);

    if (!ctx) {
        perror("Unable to create SSL context");
        ERR_print_errors_fp(stderr);
        exit(EXIT_FAILURE);
    }

    return ctx;
}

void handleErrorWithSSL(const char* message) {
    perror(message);
    ERR_print_errors_fp(stderr);
    exit(EXIT_FAILURE);
}

void startMotor() {
    gpioWrite(IN1, 1);
    gpioWrite(IN2, 0);
    if (SSL_write(ssl1, secret1, strlen(secret1)) <= 0) {
        handleErrorWithSSL("SSL_write failed in startMotor for server 1");
    }
    if (SSL_write(ssl2, secret2, strlen(secret2)) <= 0) {
        handleErrorWithSSL("SSL_write failed in startMotor for server 2");
    }
}

// Define other motor functions here similarly...

void stopMotor() {
    gpioWrite(IN1, 0);
    gpioWrite(IN2, 0);
    gpioWrite(ENA, 0);
    if (SSL_write(ssl1, secret1, strlen(secret1)) <= 0) {
        handleErrorWithSSL("SSL_write failed in stopMotor for server 1");
    }
    if (SSL_write(ssl2, secret2, strlen(secret2)) <= 0) {
        handleErrorWithSSL("SSL_write failed in stopMotor for server 2");
    }
}

void *handle_server1(void *arg) {
    while (1) {
        char buffer[BUFFER_SIZE];
        int bytes_received = SSL_read(ssl1, buffer, sizeof(buffer) - 1);
        if (bytes_received <= 0) {
            break;
        }
        buffer[bytes_received] = '\0';
        // Process message received from server 1
    }
    return NULL;
}

void *handle_server2(void *arg) {
    while (1) {
        char buffer[BUFFER_SIZE];
        int bytes_received = SSL_read(ssl2, buffer, sizeof(buffer) - 1);
        if (bytes_received <= 0) {
            break;
        }
        buffer[bytes_received] = '\0';
        // Process message received from server 2
    }
    return NULL;
}

int main() {
    struct sockaddr_in server_addr1, server_addr2;
    init_openssl();
    SSL_CTX *ctx = create_context();

    int sock1 = socket(AF_INET, SOCK_STREAM, 0);
    int sock2 = socket(AF_INET, SOCK_STREAM, 0);
    if (sock1 < 0 || sock2 < 0) {
        handleErrorWithSSL("Socket creation failed");
    }

    memset(&server_addr1, 0, sizeof(server_addr1));
    memset(&server_addr2, 0, sizeof(server_addr2));
    server_addr1.sin_family = AF_INET;
    server_addr1.sin_port = htons(PORT1);
    server_addr2.sin_family = AF_INET;
    server_addr2.sin_port = htons(PORT2);

    if (inet_pton(AF_INET, "127.0.0.1", &server_addr1.sin_addr) <= 0 ||
        inet_pton(AF_INET, "127.0.0.1", &server_addr2.sin_addr) <= 0) {
        handleErrorWithSSL("Invalid address/ Address not supported");
    }

    if (connect(sock1, (struct sockaddr *)&server_addr1, sizeof(server_addr1)) < 0 ||
        connect(sock2, (struct sockaddr *)&server_addr2, sizeof(server_addr2)) < 0) {
        handleErrorWithSSL("Connection failed");
    }

    ssl1 = SSL_new(ctx);
    ssl2 = SSL_new(ctx);
    SSL_set_fd(ssl1, sock1);
    SSL_set_fd(ssl2, sock2);

    if (SSL_connect(ssl1) != 1 || SSL_connect(ssl2) != 1) {
        handleErrorWithSSL("SSL_connect failed");
    }

    if (gpioInitialise() < 0) {
        handleErrorWithSSL("pigpio initialisation failed");
    }
    gpioSetMode(IN1, PI_OUTPUT);
    gpioSetMode(IN2, PI_OUTPUT);
    gpioSetMode(ENA, PI_OUTPUT);

    pthread_t thread1, thread2;
    pthread_create(&thread1, NULL, handle_server1, NULL);
    pthread_create(&thread2, NULL, handle_server2, NULL);

    while (1) {
        printf("Enter command ('start', 'stop', or 'quit'): ");
        char command[10];
        scanf("%s", command);
        if (strcmp(command, "start") == 0) {
            startMotor();
        } else if (strcmp(command, "stop") == 0) {
            stopMotor();
        } else if (strcmp(command, "quit") == 0) {
            break;
        } else {
            printf("Invalid command\n");
        }
    }

    SSL_shutdown(ssl1);
    SSL_shutdown(ssl2);
    SSL_free(ssl1);
    SSL_free(ssl2);
    close(sock1);
    close(sock2);
    SSL_CTX_free(ctx);
    cleanup_openssl();
    gpioTerminate();

    return 0;
}




#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <openssl/ssl.h>
#include <openssl/err.h>
#include <poll.h> // Include this header for poll()
#include "mfk.h"

#define BUFFER_SIZE 1024
int G;
void init_openssl() {
    SSL_library_init();
    SSL_load_error_strings();
}

SSL_CTX* create_context() {
    const SSL_METHOD *method;
    SSL_CTX *ctx;

    method = SSLv23_client_method();
    ctx = SSL_CTX_new(method);

    if (!ctx) {
        perror("Unable to create SSL context");
        ERR_print_errors_fp(stderr);
        exit(EXIT_FAILURE);
    }

    return ctx;
}

void calculateSum(int n, SSL *ssl, char secret[]) {
    int G = 2;
    int sum = 0;

    for (int i = 1; i <= n; i++) {
        sum += i;
    }

    strcpy(secret, check(secret, G));
    SSL_write(ssl, secret, strlen(secret));
}

void calculateSub(int n, SSL *ssl, char secret[]) {
    int G = 4;
    int sub = 0;

    for (int i = 1; i <= n; i++) {
        sub -= i;
    }

    strcpy(secret, check(secret, G));
    SSL_write(ssl, secret, strlen(secret));
}

int main() {
    const int num_servers = 2; // Set the number of servers here
    int client_fd[num_servers];
    struct sockaddr_in server_addr[num_servers];
    SSL *ssl[num_servers];
    char secret[num_servers][SHA256_DIGEST_LENGTH * 2 + 1];

    init_openssl();
    SSL_CTX *ctx = create_context();

    // Define server addresses and ports
    char *server_ips[num_servers];
    server_ips[0] = "127.0.0.1";
    server_ips[1] = "192.168.0.124";

    int server_ports[num_servers];
    server_ports[0] = 12345;
    server_ports[1] = 12346;

    // Connect to each server
    for (int i = 0; i < num_servers; i++) {
        if ((client_fd[i] = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
            perror("Socket creation failed");
            exit(EXIT_FAILURE);
        }

        server_addr[i].sin_family = AF_INET;
        server_addr[i].sin_port = htons(server_ports[i]);

        if (inet_pton(AF_INET, server_ips[i], &server_addr[i].sin_addr) <= 0) {
            perror("Invalid address/Address not supported");
            exit(EXIT_FAILURE);
        }

        if (connect(client_fd[i], (struct sockaddr *)&server_addr[i], sizeof(server_addr[i])) < 0) {
            perror("Connection failed");
            exit(EXIT_FAILURE);
        }

        ssl[i] = SSL_new(ctx);
        SSL_set_fd(ssl[i], client_fd[i]);

        if (SSL_connect(ssl[i]) <= 0) {
            ERR_print_errors_fp(stderr);
            exit(EXIT_FAILURE);
        } else {
            printf("SSL connection established with server %d\n", i + 1);
        }



    }

    // Prepare for poll
    struct pollfd fds[num_servers];
    for (int i = 0; i < num_servers; i++) {
        fds[i].fd = client_fd[i];
        fds[i].events = POLLIN;
    }

    while (1) {
            for (int i = 0; i < num_servers; i++) {
        strcpy(secret[i], "9"); // Reset secret to "9" for each server
        fds[i].fd = client_fd[i];
        fds[i].events = POLLIN;
    }
        int ret = poll(fds, num_servers, -1); // Wait indefinitely for activity

        if (ret < 0) {
            perror("poll() failed");
            break;
        }

        for (int i = 0; i < num_servers; i++) {
            if (fds[i].revents & POLLIN) {
                char message[BUFFER_SIZE];
                int bytes_received = SSL_read(ssl[i], message, sizeof(message) - 1);
                if (bytes_received <= 0) {
                    // Connection closed or error occurred
                    break;
                }
                message[bytes_received] = '\0';
                printf("Received from server %d: %s\n", i + 1, message);

                if (strcmp(message, "0") == 0) {
                           G = 1;
                    strcpy(secret[i], check(secret[i], G));
                    calculateSub(20, ssl[i], secret[i]);
                } else if (strcmp(message, "1") == 0) {
                           G = 3;
                    strcpy(secret[i], check(secret[i], G));
                    calculateSum(20, ssl[i], secret[i]);
                }
            }
        }
    }

    for (int i = 0; i < num_servers; i++) {
        SSL_shutdown(ssl[i]);
        SSL_free(ssl[i]);
        close(client_fd[i]);
    }
    SSL_CTX_free(ctx);
    EVP_cleanup();
    return 0;
}
